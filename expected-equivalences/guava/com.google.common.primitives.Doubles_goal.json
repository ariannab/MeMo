[
  {
    "signature": "tryParse(java.lang.String string)",
    "name": "tryParse",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Double",
      "name": "java.lang.Double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "string"
      }
    ],
    "equivalence": {
      "comment": "Parses the specified string as a double-precision floating point value. The ASCII character '-' ('&#92;u002D') is recognized as the minus sign. <p>Unlike Double#parseDouble(String), this method returns null instead of throwing an exception if parsing fails. Valid inputs are exactly those accepted by Double#valueOf(String), except that leading and trailing whitespace is not permitted. <p>This implementation is likely to be faster than Double.parseDouble if many failures are expected.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "max(double... array)",
    "name": "max",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "comment": "Returns the greatest value present in array, using the same rules of comparison as double).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compare(double a, double b)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "Compares the two specified double values. The sign of the value returned is the same as that of ((Double) a).{@linkplain Double#compareTo compareTo}(b). As with that method, NaN is treated as greater than all other values, and 0.0 > -0.0. <p>Note: this method simply delegates to the JDK method Double#compare. It is provided for consistency with the other primitive types, whose compare methods were not added to the JDK until JDK 7.",
      "kind": "FreeText",
      "condition": "java.lang.Math.signum(methodResultID)==java.lang.Math.signum( ((Double) args[0]).compareTo(args[1]) ) && methodResultID==( java.lang.Double.compare(args[0], args[1]) )"
    }
  },
  {
    "signature": "join(java.lang.String separator, double... array)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "comment": "Returns a string containing the supplied double values, converted to strings as specified by Double#toString(double), and separated by separator. For example, join(\"-\", 1.0, 2.0, 3.0) returns the string \"1.0-2.0-3.0\". <p>Note that Double#toString(double) formats double differently in GWT sometimes. In the previous example, it returns the string \"1-2-3\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(double[] array, double[] target)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. <p>More formally, returns the lowest index i such that java.util.Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target. <p>Note that this always returns -1 when target contains NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(double[]... arrays)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "arrays"
      }
    ],
    "equivalence": {
      "comment": "Returns the values from each provided array combined into a single array. For example, concat(new double[] {a, b, new double[] {}, new double[] {c}} returns the array {a, b, c}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "lexicographicalComparator()",
    "name": "lexicographicalComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<double[]>",
      "name": "java.util.Comparator<double[]>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a comparator that compares two double arrays lexicographically. That is, it compares, using double)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [1.0] < [1.0, 2.0] < [2.0]. <p>The returned comparator is inconsistent with Object#equals(Object) (since arrays support only identity equality), but it is consistent with double[]). @see Lexicographical order article at Wikipedia.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "stringConverter()",
    "name": "stringConverter",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Converter<java.lang.String, java.lang.Double>",
      "name": "com.google.common.base.Converter<java.lang.String, java.lang.Double>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a serializable converter object that converts between strings and doubles using Double#valueOf and Double#toString().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(java.util.Collection<? extends java.lang.Number> collection)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "comment": "Returns an array containing each value of collection, converted to a double value in the manner of Number#doubleValue. <p>Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "min(double... array)",
    "name": "min",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "comment": "Returns the least value present in array, using the same rules of comparison as double).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asList(double... backingArray)",
    "name": "asList",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Double>",
      "name": "java.util.List<java.lang.Double>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "backingArray"
      }
    ],
    "equivalence": {
      "comment": "Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Double objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified. <p>The returned list may have unexpected behavior if it contains NaN, or if NaN is used as a parameter to any of its methods.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.util.Arrays.asList(args[0]))"
    }
  },
  {
    "signature": "lastIndexOf(double[] array, double target)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the last appearance of the value target in array. Note that this always returns -1 when target is NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(double[] array, int minLength, int padding)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[]",
      "name": "double[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minLength"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "padding"
      }
    ],
    "equivalence": {
      "comment": "Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(double[] array, double target)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the first appearance of the value target in array. Note that this always returns -1 when target is NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isFinite(double value)",
    "name": "isFinite",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Returns true if value represents a real number. This is equivalent to, but not necessarily implemented as, !(Double.isInfinite(value) || Double.isNaN(value)).",
      "kind": "FreeText",
      "condition": "methodResultID==(!(Double.isInfinite(args[0]) || Double.isNaN(args[0])))"
    }
  },
  {
    "signature": "hashCode(double value)",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Returns a hash code for value; equal to the result of invoking ((Double) value).hashCode().",
      "kind": "FreeText",
      "condition": "methodResultID==(((Double) args[0]).hashCode())"
    }
  },
  {
    "signature": "contains(double[] array, double target)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Doubles",
      "name": "Doubles",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Doubles",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[D",
          "name": "double[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns true if target is present as an element anywhere in array. Note that this always returns false when target is NaN.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]