[
  {
    "signature": "toArray(java.util.Collection<java.lang.Boolean> collection)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "collection"
      }
    ],
    "equivalence": {
      "comment": "Copies a collection of Boolean instances into a new array of primitive boolean values. <p>Elements are copied from the argument collection as if by collection.toArray(). Calling this method is as thread-safe as calling that method. <p>Note: consider representing the collection as a java.util.BitSet instead.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "countTrue(boolean... values)",
    "name": "countTrue",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Returns the number of values that are true.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "join(java.lang.String separator, boolean... array)",
    "name": "join",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "separator"
      },
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "comment": "Returns a string containing the supplied boolean values separated by separator. For example, join(\"-\", false, true, false) returns the string \"false-true-false\".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "compare(boolean a, boolean b)",
    "name": "compare",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "Compares the two specified boolean values in the standard way (false is considered less than true). The sign of the value returned is the same as that of ((Boolean) a).compareTo(b). <p>Note for Java 7 and later: this method should be treated as deprecated; use the equivalent Boolean#compare method instead.",
      "kind": "FreeText",
      "condition": "java.lang.Math.signum(methodResultID)==java.lang.Math.signum( ((Boolean) args[0]).compareTo(args[1]) ) && methodResultID==( java.lang.Boolean.compare(args[0], args[1]) )"
    }
  },
  {
    "signature": "lexicographicalComparator()",
    "name": "lexicographicalComparator",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Comparator<boolean[]>",
      "name": "java.util.Comparator<boolean[]>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a comparator that compares two boolean arrays lexicographically. That is, it compares, using boolean)), the first pair of values that follow any common prefix, or when one array is a prefix of the other, treats the shorter array as the lesser. For example, [] < [false] < [false, true] < [true]. <p>The returned comparator is inconsistent with Object#equals(Object) (since arrays support only identity equality), but it is consistent with boolean[]). @see Lexicographical order article at Wikipedia.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(boolean[] array, boolean[] target)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the start position of the first occurrence of the specified target within array, or -1 if there is no such occurrence. <p>More formally, returns the lowest index i such that java.util.Arrays.copyOfRange(array, i, i + target.length) contains exactly the same elements as target.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "ensureCapacity(boolean[] array, int minLength, int padding)",
    "name": "ensureCapacity",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "minLength"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "padding"
      }
    ],
    "equivalence": {
      "comment": "Returns an array containing the same values as array, but guaranteed to be of a specified minimum length. If array already has a length of at least minLength, it is returned directly. Otherwise, a new array of size minLength + padding is returned, containing the values of array, and zeroes in the remaining places.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(boolean[]... arrays)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "boolean[]",
      "name": "boolean[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[Z",
          "name": "boolean[][]",
          "isArray": true
        },
        "name": "arrays"
      }
    ],
    "equivalence": {
      "comment": "Returns the values from each provided array combined into a single array. For example, concat(new boolean[] {a, b, new boolean[] {}, new boolean[] {c}} returns the array {a, b, c}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asList(boolean... backingArray)",
    "name": "asList",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.List<java.lang.Boolean>",
      "name": "java.util.List<java.lang.Boolean>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "backingArray"
      }
    ],
    "equivalence": {
      "comment": "Returns a fixed-size list backed by the specified array, similar to Arrays#asList(Object[]). The list supports Object), but any attempt to set a value to null will result in a NullPointerException. <p>The returned list maintains the values, but not the identities, of Boolean objects written to or read from it. For example, whether list.get(0) == list.get(0) is true for the returned list is unspecified.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.util.Arrays.asList(args[0]))"
    }
  },
  {
    "signature": "hashCode(boolean value)",
    "name": "hashCode",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": "Returns a hash code for value; equal to the result of invoking ((Boolean) value).hashCode().",
      "kind": "FreeText",
      "condition": "methodResultID==(((Boolean) args[0]).hashCode())"
    }
  },
  {
    "signature": "lastIndexOf(boolean[] array, boolean target)",
    "name": "lastIndexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the last appearance of the value target in array.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(boolean[] array, boolean target)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns true if target is present as an element anywhere in array. <p>Note: consider representing the array as a java.util.BitSet instead, replacing Booleans.contains(array, true) with !bitSet.isEmpty() and Booleans.contains(array, false) with bitSet.nextClearBit(0) == sizeOfBitSet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(boolean[] array, boolean target)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.primitives.Booleans",
      "name": "Booleans",
      "isArray": false
    },
    "targetClass": "com.google.common.primitives.Booleans",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Z",
          "name": "boolean[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "target"
      }
    ],
    "equivalence": {
      "comment": "Returns the index of the first appearance of the value target in array. <p>Note: consider representing the array as a java.util.BitSet instead, and using java.util.BitSet#nextSetBit(int) or java.util.BitSet#nextClearBit(int).",
      "kind": "FreeText",
      "condition": ""
    }
  }
]