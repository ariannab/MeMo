[
  {
    "signature": "add(com.google.common.collect.Range<C> range)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(com.google.common.collect.RangeSet<C> other)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.RangeSet",
          "name": "RangeSet",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "encloses(com.google.common.collect.Range<C> otherRange)",
    "name": "encloses",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "otherRange"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "span()",
    "name": "span",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Range<C>",
      "name": "com.google.common.collect.Range<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "of(com.google.common.collect.Range<C> range)",
    "name": "of",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": "Returns an immutable range set containing the specified single range. If range.isEmpty(), this is equivalent to ImmutableRangeSet#of().",
      "kind": "FreeText",
      "condition": "if(args[0].isEmpty()) { methodResultID.equals(receiverObjectClone.of()) }"
    }
  }
  {
    "signature": "rangeContaining(C value)",
    "name": "rangeContaining",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.Range<C>",
      "name": "com.google.common.collect.Range<C>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Comparable",
          "name": "Comparable",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asRanges()",
    "name": "asRanges",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>>",
      "name": "com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asSet(com.google.common.collect.DiscreteDomain<C> domain)",
    "name": "asSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSortedSet<C>",
      "name": "com.google.common.collect.ImmutableSortedSet<C>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.DiscreteDomain",
          "name": "DiscreteDomain",
          "isArray": false
        },
        "name": "domain"
      }
    ],
    "equivalence": {
      "comment": "Returns an ImmutableSortedSet containing the same values in the given domain {@linkplain RangeSet#contains contained} by this range set. <p>Note: a.asSet(d).equals(b.asSet(d)) does not imply a.equals(b)! For example, a and b could be [2..4] and (1..5), or the empty ranges [3..3) and [4..4). <p>Warning: Be extremely careful what you do with the asSet view of a large range set (such as ImmutableRangeSet.of(Range.greaterThan(0))). Certain operations on such a set can be performed efficiently, but others (such as Set#hashCode or Collections#frequency) can cause major performance problems. <p>The returned set's Object#toString method returns a short-hand form of the set's contents, such as \"[1..100]\"}.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asDescendingSetOfRanges()",
    "name": "asDescendingSetOfRanges",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>>",
      "name": "com.google.common.collect.ImmutableSet<com.google.common.collect.Range<C>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "all()",
    "name": "all",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an immutable range set containing the single range Range#all().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "complement()",
    "name": "complement",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(com.google.common.collect.RangeSet<C> other)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.RangeSet",
          "name": "RangeSet",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "subRangeSet(com.google.common.collect.Range<C> range)",
    "name": "subRangeSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": "Returns a view of the intersection of this range set with the given range.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.ImmutableRangeSet(com.google.common.collect.ImmutableList<com.google.common.collect.Range<C>> ranges)",
    "name": "com.google.common.collect.ImmutableRangeSet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.ImmutableList",
          "name": "ImmutableList",
          "isArray": false
        },
        "name": "ranges"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isPartialView()",
    "name": "isPartialView",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns true if this immutable range set's implementation contains references to user-created objects that aren't accessible via this range set's methods. This is generally used to determine whether copyOf implementations should make an explicit copy to avoid memory leaks.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copyOf(com.google.common.collect.RangeSet<C> rangeSet)",
    "name": "copyOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.RangeSet",
          "name": "RangeSet",
          "isArray": false
        },
        "name": "rangeSet"
      }
    ],
    "equivalence": {
      "comment": "Returns an immutable copy of the specified RangeSet.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "writeReplace()",
    "name": "writeReplace",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "of()",
    "name": "of",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet<C>",
      "name": "com.google.common.collect.ImmutableRangeSet<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns an empty immutable range set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "builder()",
    "name": "builder",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet$Builder<C>",
      "name": "com.google.common.collect.ImmutableRangeSet$Builder<C>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns a new builder for an immutable range set.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(com.google.common.collect.Range<C> range)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.ImmutableRangeSet",
      "name": "ImmutableRangeSet",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.ImmutableRangeSet",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Range",
          "name": "Range",
          "isArray": false
        },
        "name": "range"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  }
]