[
  {
    "signature": "forEnumeration(java.util.Enumeration<T> enumeration)",
    "name": "forEnumeration",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Enumeration",
          "name": "Enumeration",
          "isArray": false
        },
        "name": "enumeration"
      }
    ],
    "equivalence": {
      "comment": "Adapts an Enumeration to the Iterator interface. <p>This method has no equivalent in Iterables because viewing an Enumeration as an Iterable is impossible. However, the contents can be copied into a collection using Collections#list.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forArray(T[] array, int offset, int length, int index)",
    "name": "forArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableListIterator<T>",
      "name": "com.google.common.collect.UnmodifiableListIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "offset"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "length"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "comment": "Returns a list iterator containing the elements in the specified range of array in order, starting at the specified index. <p>The Iterable equivalent of this method is Arrays.asList(array).subList(offset, offset + length).listIterator(index).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.util.Arrays.asList(args[0]).subList(args[1], args[1] + args[2]).listIterator(args[3]))"
    }
  },
  {
    "signature": "getLast(java.util.Iterator<? extends T> iterator, T defaultValue)",
    "name": "getLast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Advances iterator to the end, returning the last element or defaultValue if the iterator is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cast(java.util.Iterator<T> iterator)",
    "name": "cast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ListIterator<T>",
      "name": "java.util.ListIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString(java.util.Iterator<?> iterator)",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns a string representation of iterator, with the format [e1, e2, ..., en]. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekingIterator(java.util.Iterator<? extends T> iterator)",
    "name": "peekingIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.PeekingIterator<T>",
      "name": "com.google.common.collect.PeekingIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns a PeekingIterator backed by the given iterator. <p>Calls to the peek method with no intervening calls to next do not affect the iteration, and hence return the same object each time. A subsequent call to next is guaranteed to return the same object again. For example: PeekingIterator<String> peekingIterator = Iterators.peekingIterator(Iterators.forArray(\"a\", \"b\")); String a1 = peekingIterator.peek(); // returns \"a\" String a2 = peekingIterator.peek(); // also returns \"a\" String a3 = peekingIterator.next(); // also returns \"a\" <p>Any structural changes to the underlying iteration (aside from those performed by the iterator's own PeekingIterator#remove() method) will leave the iterator in an undefined state. <p>The returned iterator does not support removal after peeking, as explained by PeekingIterator#remove(). <p>Note: If the given iterator is already a PeekingIterator, it might be returned to the caller, although this is neither guaranteed to occur nor required to be consistent. For example, this method might choose to pass through recognized implementations of PeekingIterator when the behavior of the implementation is known to meet the contract guaranteed by this method. <p>There is no Iterable equivalent to this method, so use this method to wrap each individual iterator as it is generated.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "advance(java.util.Iterator<?> iterator, int numberToAdvance)",
    "name": "advance",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "numberToAdvance"
      }
    ],
    "equivalence": {
      "comment": "Calls next() on iterator, either numberToAdvance times or until hasNext() returns false, whichever comes first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "frequency(java.util.Iterator<?> iterator, java.lang.Object element)",
    "name": "frequency",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the number of elements in the specified iterator that equal the specified object. The iterator will be left exhausted: its hasNext() method will return false. @see Collections#frequency.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "all(java.util.Iterator<T> iterator, com.google.common.base.Predicate<? super T> predicate)",
    "name": "all",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns true if every element returned by iterator satisfies the given predicate. If iterator is empty, true is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "consumingIterator(java.util.Iterator<T> iterator)",
    "name": "consumingIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns a view of the supplied iterator that removes each element from the supplied iterator as it is returned. <p>The provided iterator must support Iterator#remove() or else the returned iterator will fail on the first call to next.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "elementsEqual(java.util.Iterator<?> iterator1, java.util.Iterator<?> iterator2)",
    "name": "elementsEqual",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator1"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator2"
      }
    ],
    "equivalence": {
      "comment": "Determines whether two iterators contain equal elements in the same order. More specifically, this method returns true if iterator1 and iterator2 contain the same number of elements and every element of iterator1 is equal to the corresponding element of iterator2. <p>Note that this will modify the supplied iterators, since they will have been advanced some number of elements forward.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends java.util.Iterator<? extends T>> inputs)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "inputs"
      }
    ],
    "equivalence": {
      "comment": "Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in inputs. The input iterators are not polled until necessary. <p>The returned iterator supports remove() when the corresponding input iterator supports it. The methods of the returned iterator may throw NullPointerException if any of the input iterators is null. <p>Note: the current implementation is not suitable for nested concatenated iterators, i.e. the following should be avoided when in a loop: iterator = Iterators.concat(iterator, suffix);, since iteration over the resulting iterator has a cubic complexity to the depth of the nesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "limit(java.util.Iterator<T> iterator, int limitSize)",
    "name": "limit",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "limitSize"
      }
    ],
    "equivalence": {
      "comment": "Creates an iterator returning the first limitSize elements of the given iterator. If the original iterator does not contain that many elements, the returned iterator will have the same behavior as the original iterator. The returned iterator supports remove() if the original iterator does.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.util.Iterator<? extends T> iterator, int position, T defaultValue)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "position"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Advances iterator position + 1 times, returning the element at the positionth position or defaultValue otherwise.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "transform(java.util.Iterator<F> fromIterator, com.google.common.base.Function<? super F, ? extends T> function)",
    "name": "transform",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "fromIterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Function",
          "name": "Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator that applies function to each element of fromIterator. <p>The returned iterator supports remove() if the provided iterator does. After a successful remove() call, fromIterator no longer contains the corresponding element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "any(java.util.Iterator<T> iterator, com.google.common.base.Predicate<? super T> predicate)",
    "name": "any",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns true if one or more elements returned by iterator satisfy the given predicate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollNext(java.util.Iterator<T> iterator)",
    "name": "pollNext",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Deletes and returns the next value from the iterator, or returns null if there is no such value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends T> a, java.util.Iterator<? extends T> b)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      }
    ],
    "equivalence": {
      "comment": "Combines two iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b. The source iterators are not polled until necessary. <p>The returned iterator supports remove() when the corresponding input iterator supports it. <p>Note: the current implementation is not suitable for nested concatenated iterators, i.e. the following should be avoided when in a loop: iterator = Iterators.concat(iterator, suffix);, since iteration over the resulting iterator has a cubic complexity to the depth of the nesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(java.util.Iterator<? extends T> iterator, java.lang.Class<T> type)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "equivalence": {
      "comment": "Copies an iterator's elements into an array. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "filter(java.util.Iterator<T> unfiltered, com.google.common.base.Predicate<? super T> predicate)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns the elements of unfiltered that satisfy a predicate.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyModifiableIterator()",
    "name": "emptyModifiableIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeIf(java.util.Iterator<T> removeFrom, com.google.common.base.Predicate<? super T> predicate)",
    "name": "removeIf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "removeFrom"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Removes every element that satisfies the provided predicate from the iterator. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forArray(T... array)",
    "name": "forArray",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "array"
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator containing the elements of array in order. The returned iterator is a view of the array; subsequent changes to the array will be reflected in the iterator. <p>Note: It is often preferable to represent your data using a collection type, for example using Arrays#asList(Object[]), making this method unnecessary. <p>The Iterable equivalent of this method is either Arrays#asList(Object[]), ImmutableList#copyOf(Object[])}, or ImmutableList#of.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "tryFind(java.util.Iterator<T> iterator, com.google.common.base.Predicate<? super T> predicate)",
    "name": "tryFind",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.base.Optional<T>",
      "name": "com.google.common.base.Optional<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns an Optional containing the first element in iterator that satisfies the given predicate, if such an element exists. If no such element is found, an empty Optional will be returned from this method and the iterator will be left exhausted: its hasNext() method will return false. <p>Warning: avoid using a predicate that matches null. If null is matched in iterator, a NullPointerException will be thrown.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAll(java.util.Collection<T> addTo, java.util.Iterator<? extends T> iterator)",
    "name": "addAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "addTo"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Adds all elements in iterator to collection. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends T> a, java.util.Iterator<? extends T> b, java.util.Iterator<? extends T> c)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "equivalence": {
      "comment": "Combines three iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b, followed by the elements in c. The source iterators are not polled until necessary. <p>The returned iterator supports remove() when the corresponding input iterator supports it. <p>Note: the current implementation is not suitable for nested concatenated iterators, i.e. the following should be avoided when in a loop: iterator = Iterators.concat(iterator, suffix);, since iteration over the resulting iterator has a cubic complexity to the depth of the nesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLast(java.util.Iterator<T> iterator)",
    "name": "getLast",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Advances iterator to the end, returning the last element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyListIterator()",
    "name": "emptyListIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableListIterator<T>",
      "name": "com.google.common.collect.UnmodifiableListIterator<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNext(java.util.Iterator<? extends T> iterator, T defaultValue)",
    "name": "getNext",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the next element in iterator or defaultValue if the iterator is empty. The Iterables analog to this method is Iterables#getFirst.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear(java.util.Iterator<?> iterator)",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Clears the iterator using its remove method.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "partition(java.util.Iterator<T> iterator, int size)",
    "name": "partition",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<java.util.List<T>>",
      "name": "com.google.common.collect.UnmodifiableIterator<java.util.List<T>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "equivalence": {
      "comment": "Divides an iterator into unmodifiable sublists of the given size (the final list may be smaller). For example, partitioning an iterator containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e]] -- an outer iterator containing two inner lists of three and two elements, all in the original order. <p>The returned lists implement java.util.RandomAccess.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.util.Iterator<?> iterator, java.lang.Object element)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "element",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns true if iterator contains element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "find(java.util.Iterator<T> iterator, com.google.common.base.Predicate<? super T> predicate)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns the first element in iterator that satisfies the given predicate; use this method only when such an element is known to exist. If no such element is found, the iterator will be left exhausted: its hasNext() method will return false. If it is possible that no element will match, use tryFind or Predicate, Object) instead.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends T> a, java.util.Iterator<? extends T> b, java.util.Iterator<? extends T> c, java.util.Iterator<? extends T> d)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "a"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "b"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "c"
      },
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "d"
      }
    ],
    "equivalence": {
      "comment": "Combines four iterators into a single iterator. The returned iterator iterates across the elements in a, followed by the elements in b, followed by the elements in c, followed by the elements in d. The source iterators are not polled until necessary. <p>The returned iterator supports remove() when the corresponding input iterator supports it. <p>Note: the current implementation is not suitable for nested concatenated iterators, i.e. the following should be avoided when in a loop: iterator = Iterators.concat(iterator, suffix);, since iteration over the resulting iterator has a cubic complexity to the depth of the nesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "concat(java.util.Iterator<? extends T>... inputs)",
    "name": "concat",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.util.Iterator;",
          "name": "Iterator[]",
          "isArray": true
        },
        "name": "inputs"
      }
    ],
    "equivalence": {
      "comment": "Combines multiple iterators into a single iterator. The returned iterator iterates across the elements of each iterator in inputs. The input iterators are not polled until necessary. <p>The returned iterator supports remove() when the corresponding input iterator supports it. <p>Note: the current implementation is not suitable for nested concatenated iterators, i.e. the following should be avoided when in a loop: iterator = Iterators.concat(iterator, suffix);, since iteration over the resulting iterator has a cubic complexity to the depth of the nesting.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.util.Iterator<?> removeFrom, java.util.Collection<?> elementsToRemove)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "removeFrom"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "elementsToRemove"
      }
    ],
    "equivalence": {
      "comment": "Traverses an iterator and removes every element that belongs to the provided collection. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size(java.util.Iterator<?> iterator)",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns the number of elements remaining in iterator. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOnlyElement(java.util.Iterator<? extends T> iterator, T defaultValue)",
    "name": "getOnlyElement",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the single element contained in iterator, or defaultValue if the iterator is empty.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "paddedPartition(java.util.Iterator<T> iterator, int size)",
    "name": "paddedPartition",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<java.util.List<T>>",
      "name": "com.google.common.collect.UnmodifiableIterator<java.util.List<T>>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "equivalence": {
      "comment": "Divides an iterator into unmodifiable sublists of the given size, padding the final iterator with null values if necessary. For example, partitioning an iterator containing [a, b, c, d, e] with a partition size of 3 yields [[a, b, c], [d, e, null]] -- an outer iterator containing two inner lists of three elements each, all in the original order. <p>The returned lists implement java.util.RandomAccess.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "find(java.util.Iterator<? extends T> iterator, com.google.common.base.Predicate<? super T> predicate, T defaultValue)",
    "name": "find",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "defaultValue",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns the first element in iterator that satisfies the given predicate. If no such element is found, defaultValue will be returned from this method and the iterator will be left exhausted: its hasNext() method will return false. Note that this can usually be handled more naturally using tryFind(iterator, predicate).or(defaultValue).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cycle(java.lang.Iterable<T> iterable)",
    "name": "cycle",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterable"
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator that cycles indefinitely over the elements of iterable. <p>The returned iterator supports remove() if the provided iterator does. After remove() is called, subsequent cycles omit the removed element, which is no longer in iterable. The iterator's hasNext() method returns true until iterable is empty. <p>Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "emptyIterator()",
    "name": "emptyIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Returns the empty iterator. <p>The Iterable equivalent of this method is ImmutableSet#of(). @deprecated Use ImmutableSet.<T>of().iterator() instead; or for Java 7 or later, Collections#emptyIterator. This method is scheduled for removal in May 2016.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getOnlyElement(java.util.Iterator<T> iterator)",
    "name": "getOnlyElement",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Returns the single element contained in iterator.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cycle(T... elements)",
    "name": "cycle",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "java.util.Iterator<T>",
      "name": "java.util.Iterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "elements"
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator that cycles indefinitely over the provided elements. <p>The returned iterator supports remove(). After remove() is called, subsequent cycles omit the removed element, but elements does not change. The iterator's hasNext() method returns true until all of the original elements have been removed. <p>Warning: Typical uses of the resulting iterator may produce an infinite loop. You should use an explicit break or be certain that you will eventually remove all the elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(java.util.Iterator<T> iterator, int position)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "position"
      }
    ],
    "equivalence": {
      "comment": "Advances iterator position + 1 times, returning the element at the positionth position.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "asEnumeration(java.util.Iterator<T> iterator)",
    "name": "asEnumeration",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Enumeration<T>",
      "name": "java.util.Enumeration<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Adapts an Iterator to the Enumeration interface. <p>The Iterable equivalent of this method is either Collections#enumeration (if you have a Collection), or Iterators.asEnumeration(collection.iterator()).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableIterator(java.util.Iterator<T> iterator)",
    "name": "unmodifiableIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "unmodifiableIterator(com.google.common.collect.UnmodifiableIterator<T> iterator)",
    "name": "unmodifiableIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.UnmodifiableIterator",
          "name": "UnmodifiableIterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Simply returns its argument. @deprecated no need to use this.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "checkNonnegative(int position)",
    "name": "checkNonnegative",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "position"
      }
    ],
    "equivalence": {
      "comment": ".",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "singletonIterator(T value)",
    "name": "singletonIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator containing only value. <p>The Iterable equivalent of this method is Collections#singleton.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(java.util.Collections.singleton(args[0]))"
    }
  },
  {
    "signature": "peekingIterator(com.google.common.collect.PeekingIterator<T> iterator)",
    "name": "peekingIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.PeekingIterator<T>",
      "name": "com.google.common.collect.PeekingIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.PeekingIterator",
          "name": "PeekingIterator",
          "isArray": false
        },
        "name": "iterator"
      }
    ],
    "equivalence": {
      "comment": "Simply returns its argument. @deprecated no need to use this.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "mergeSorted(java.lang.Iterable<? extends java.util.Iterator<? extends T>> iterators, java.util.Comparator<? super T> comparator)",
    "name": "mergeSorted",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "iterators"
      },
      {
        "type": {
          "qualifiedName": "java.util.Comparator",
          "name": "Comparator",
          "isArray": false
        },
        "name": "comparator"
      }
    ],
    "equivalence": {
      "comment": "Returns an iterator over the merged contents of all given iterators, traversing every element of the input iterators. Equivalent entries will not be de-duplicated. <p>Callers must ensure that the source iterators are in non-descending order as this method does not sort its input. <p>For any equivalent elements across all iterators, it is undefined which element is returned first.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "retainAll(java.util.Iterator<?> removeFrom, java.util.Collection<?> elementsToRetain)",
    "name": "retainAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "removeFrom"
      },
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "elementsToRetain"
      }
    ],
    "equivalence": {
      "comment": "Traverses an iterator and removes every element that does not belong to the provided collection. The iterator will be left exhausted: its hasNext() method will return false.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "filter(java.util.Iterator<?> unfiltered, java.lang.Class<T> type)",
    "name": "filter",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.UnmodifiableIterator<T>",
      "name": "com.google.common.collect.UnmodifiableIterator<T>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "unfiltered"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "type"
      }
    ],
    "equivalence": {
      "comment": "Returns all instances of class type in unfiltered. The returned iterator has elements whose class is type or a subclass of type.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "indexOf(java.util.Iterator<T> iterator, com.google.common.base.Predicate<? super T> predicate)",
    "name": "indexOf",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.Iterators",
      "name": "Iterators",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.Iterators",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Iterator",
          "name": "Iterator",
          "isArray": false
        },
        "name": "iterator"
      },
      {
        "type": {
          "qualifiedName": "com.google.common.base.Predicate",
          "name": "Predicate",
          "isArray": false
        },
        "name": "predicate"
      }
    ],
    "equivalence": {
      "comment": "Returns the index in iterator of the first element that satisfies the provided predicate, or -1 if the Iterator has no such elements. <p>More formally, returns the lowest index i such that predicate.apply(Iterators.get(iterator, i)) returns true, or -1 if there is no such index. <p>If -1 is returned, the iterator will be left exhausted: its hasNext() method will return false. Otherwise, the iterator will be set to the element which satisfies the predicate.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]