[
  {
    "signature": "entryIterator()",
    "name": "entryIterator",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<java.util.Map$Entry<K, V>>",
      "name": "java.util.Iterator<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entryIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsValue(java.lang.Object value)",
    "name": "containsValue",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "containsValue(java.lang.Object value)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAll(java.lang.Object key)",
    "name": "removeAll",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<V>",
      "name": "java.util.List<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "removeAll(java.lang.Object key)",
      "comment": "{@inheritDoc} The returned list is immutable and implements java.util.RandomAccess.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(int expectedKeys)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap<K, V>",
      "name": "com.google.common.collect.LinkedListMultimap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "expectedKeys"
      }
    ],
    "equivalence": {
      "member": "create(int expectedKeys)",
      "comment": "Constructs an empty LinkedListMultimap with enough capacity to hold the specified number of keys without rehashing.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create()",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap<K, V>",
      "name": "com.google.common.collect.LinkedListMultimap<K, V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "create()",
      "comment": "Creates a new, empty LinkedListMultimap with the default initial capacity.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",
    "name": "create",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap<K, V>",
      "name": "com.google.common.collect.LinkedListMultimap<K, V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "com.google.common.collect.Multimap",
          "name": "Multimap",
          "isArray": false
        },
        "name": "multimap"
      }
    ],
    "equivalence": {
      "member": "create(com.google.common.collect.Multimap<? extends K, ? extends V> multimap)",
      "comment": "Constructs a LinkedListMultimap with the same mappings as the specified Multimap. The new multimap has the same Multimap#entries() iteration order as the input multimap.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.entries())"
    }
  },
  {
    "signature": "replaceValues(K key, java.lang.Iterable<? extends V> values)",
    "name": "replaceValues",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<V>",
      "name": "java.util.List<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Iterable",
          "name": "Iterable",
          "isArray": false
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "replaceValues(K key, java.lang.Iterable<? extends V> values)",
      "comment": "{@inheritDoc} If any entries for the specified key already exist in the multimap, their values are changed in-place without affecting the iteration order. The returned list is immutable and implements java.util.RandomAccess.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "values()",
    "name": "values",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<V>",
      "name": "java.util.List<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "values()",
      "comment": "{@inheritDoc} The iterator generated by the returned collection traverses the values in the order they were added to the multimap. Because the values may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "containsKey(java.lang.Object key)",
    "name": "containsKey",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "containsKey(java.lang.Object key)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isEmpty()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createKeySet()",
    "name": "createKeySet",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Set<K>",
      "name": "java.util.Set<K>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createKeySet()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createValues()",
    "name": "createValues",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<V>",
      "name": "java.util.List<V>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createValues()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createEntries()",
    "name": "createEntries",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.util.Map$Entry<K, V>>",
      "name": "java.util.List<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createEntries()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "createAsMap()",
    "name": "createAsMap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Map<K, java.util.Collection<V>>",
      "name": "java.util.Map<K, java.util.Collection<V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "createAsMap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(K key)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<V>",
      "name": "java.util.List<V>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "get(K key)",
      "comment": "{@inheritDoc} If the multimap is modified while an iteration over the list is in progress (except through the iterator's own add, set or remove operations) the results of the iteration are undefined. The returned list is not serializable and does not have random access.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "put(K key, V value)",
    "name": "put",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "key",
        "nullable": true
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value",
        "nullable": true
      }
    ],
    "equivalence": {
      "member": "put(K key, V value)",
      "comment": "Stores a key-value pair in the multimap.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "com.google.common.collect.LinkedListMultimap()",
    "name": "com.google.common.collect.LinkedListMultimap",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "com.google.common.collect.LinkedListMultimap()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "entries()",
    "name": "entries",
    "containingClass": {
      "qualifiedName": "com.google.common.collect.LinkedListMultimap",
      "name": "LinkedListMultimap",
      "isArray": false
    },
    "targetClass": "com.google.common.collect.LinkedListMultimap",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.List<java.util.Map$Entry<K, V>>",
      "name": "java.util.List<java.util.Map$Entry<K, V>>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "entries()",
      "comment": "{@inheritDoc} The iterator generated by the returned collection traverses the entries in the order they were added to the multimap. Because the entries may have duplicates and follow the insertion ordering, this method returns a List, instead of the Collection specified in the ListMultimap interface. An entry's Entry#getKey method always returns the same key, regardless of what happens subsequently. As long as the corresponding key-value mapping is not removed from the multimap, Entry#getValue returns the value from the multimap, which may change over time, and Entry#setValue modifies that value. Removing the mapping from the multimap does not alter the value returned by getValue(), though a subsequent setValue() call won't update the multimap but will lead to a revised value being returned by getValue().",
      "kind": "FreeText",
      "condition": ""
    }
  }
]