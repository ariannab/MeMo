[
  {
    "signature": "cern.colt.matrix.ObjectMatrix1D()",
    "name": "cern.colt.matrix.ObjectMatrix1D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "cern.colt.matrix.ObjectMatrix1D()",
      "comment": "Makes this class non instantiable, but still let's others inherit from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectFunction",
          "name": "ObjectFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.matrix.ObjectMatrix1D other, cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectObjectFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.matrix.ObjectMatrix1D other, cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectObjectFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(java.lang.Object[] values)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "assign(java.lang.Object[] values)",
      "comment": "Sets all cells to the state specified by values. values is required to have the same number of cells as the receiver.  The values are copied. So subsequent changes in values are not reflected in the matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.function.ObjectFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectFunction",
          "name": "ObjectFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.function.ObjectFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.ObjectMatrix1D other)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.ObjectMatrix1D other)",
      "comment": "Replaces all cell values of the receiver with the values of another matrix. Both matrices must have the same size. If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces as if using an intermediate auxiliary deep copy of other.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.ObjectMatrix1D y, cern.colt.function.ObjectObjectFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.ObjectMatrix1D y, cern.colt.function.ObjectObjectFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(java.lang.Object value)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "assign(java.lang.Object value)",
      "comment": "Sets all cells to the state specified by value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cardinality()",
    "name": "cardinality",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "cardinality()",
      "comment": "Returns the number of cells having non-zero values; ignores tolerance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "copy()",
      "comment": "Constructs and returns a deep copy of the receiver.  Note that the returned matrix is an independent deep copy. The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object otherObj)",
      "comment": "Compares the specified Object with the receiver for equality. Equivalent to equals(otherObj,true).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.equals(args[0],true))"
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj, boolean testForEquality)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object otherObj, boolean testForEquality)",
      "comment": "Compares the specified Object with the receiver for equality. Returns true if and only if the specified Object is also at least an ObjectMatrix1D, both matrices have the same size, and all corresponding pairs of cells in the two matrices are the same. In other words, two matrices are defined to be equal if they contain the same cell values in the same order. Tests elements for equality or identity as specified by testForEquality. When testing for equality, two elements e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int index)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "member": "get(int index)",
      "comment": "Returns the matrix cell value at coordinate index.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getContent()",
    "name": "getContent",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getContent()",
      "comment": "Returns the content of this matrix if it is a wrapper; or this otherwise. Override this method in wrappers.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNonZeros(cern.colt.list.IntArrayList indexList, cern.colt.list.ObjectArrayList valueList)",
    "name": "getNonZeros",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "indexList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "valueList"
      }
    ],
    "equivalence": {
      "member": "getNonZeros(cern.colt.list.IntArrayList indexList, cern.colt.list.ObjectArrayList valueList)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int index)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      }
    ],
    "equivalence": {
      "member": "getQuick(int index)",
      "comment": "Returns the matrix cell value at coordinate index. Provided with invalid parameters this method may return invalid objects without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): index<0 || index>=size().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCells(cern.colt.matrix.ObjectMatrix1D other)",
    "name": "haveSharedCells",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCells(cern.colt.matrix.ObjectMatrix1D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix1D other)",
    "name": "haveSharedCellsRaw",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix1D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like()",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "like()",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the same size. For example, if the receiver is an instance of type DenseObjectMatrix1D the new matrix must also be of type DenseObjectMatrix1D, if the receiver is an instance of type SparseObjectMatrix1D the new matrix must also be of type SparseObjectMatrix1D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like(int size)",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "equivalence": {
      "member": "like(int size)",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the specified size. For example, if the receiver is an instance of type DenseObjectMatrix1D the new matrix must also be of type DenseObjectMatrix1D, if the receiver is an instance of type SparseObjectMatrix1D the new matrix must also be of type SparseObjectMatrix1D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like2D(int rows, int columns)",
    "name": "like2D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix2D",
      "name": "cern.colt.matrix.ObjectMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      }
    ],
    "equivalence": {
      "member": "like2D(int rows, int columns)",
      "comment": "Construct and returns a new 2-d matrix of the corresponding dynamic type, entirelly independent of the receiver. For example, if the receiver is an instance of type DenseObjectMatrix1D the new matrix must be of type DenseObjectMatrix2D, if the receiver is an instance of type SparseObjectMatrix1D the new matrix must be of type SparseObjectMatrix2D, etc.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int index, java.lang.Object value)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "set(int index, java.lang.Object value)",
      "comment": "Sets the matrix cell at coordinate index to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int index, java.lang.Object value)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "setQuick(int index, java.lang.Object value)",
      "comment": "Sets the matrix cell at coordinate index to the specified value. Provided with invalid parameters this method may access illegal indexes without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): index<0 || index>=size().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "swap(cern.colt.matrix.ObjectMatrix1D other)",
    "name": "swap",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
          "name": "ObjectMatrix1D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "swap(cern.colt.matrix.ObjectMatrix1D other)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "toArray()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(java.lang.Object[] values)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "toArray(java.lang.Object[] values)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string representation using default formatting. @see cern.colt.matrix.objectalgo.Formatter",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "view()",
    "name": "view",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "view()",
      "comment": "Constructs and returns a new view equal to the receiver. The view is a shallow clone. Calls clone() and casts the result.  Note that the view is not a deep copy. The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa.  Use #copy() to construct an independent deep copy rather than a new view.",
      "kind": "FreeText",
      "condition": "methodResultID.equals((ObjectMatrix1D) receiverObjectID.clone())"
    }
  },
  {
    "signature": "viewFlip()",
    "name": "viewFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewPart(int index, int width)",
    "name": "viewPart",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "index"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "width"
      }
    ],
    "equivalence": {
      "member": "viewPart(int index, int width)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(int[] indexes)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "indexes"
      }
    ],
    "equivalence": {
      "member": "viewSelection(int[] indexes)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(cern.colt.function.ObjectProcedure condition)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectProcedure",
          "name": "ObjectProcedure",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "equivalence": {
      "member": "viewSelection(cern.colt.function.ObjectProcedure condition)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelectionLike(int[] offsets)",
    "name": "viewSelectionLike",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "offsets"
      }
    ],
    "equivalence": {
      "member": "viewSelectionLike(int[] offsets)",
      "comment": "Construct and returns a new selection view.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSorted()",
    "name": "viewSorted",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewSorted()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewStrides(int stride)",
    "name": "viewStrides",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "ObjectMatrix1D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix1D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix1D",
      "name": "cern.colt.matrix.ObjectMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "stride"
      }
    ],
    "equivalence": {
      "member": "viewStrides(int stride)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]