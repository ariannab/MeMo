[
  {
    "signature": "cern.colt.matrix.DoubleMatrix2D()",
    "name": "cern.colt.matrix.DoubleMatrix2D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "cern.colt.matrix.DoubleMatrix2D()",
      "comment": "Makes this class non instantiable, but still let's others inherit from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.function.DoubleDoubleFunction aggr, cern.colt.function.DoubleFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleDoubleFunction",
          "name": "DoubleDoubleFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleFunction",
          "name": "DoubleFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.function.DoubleDoubleFunction aggr, cern.colt.function.DoubleFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.matrix.DoubleMatrix2D other, cern.colt.function.DoubleDoubleFunction aggr, cern.colt.function.DoubleDoubleFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleDoubleFunction",
          "name": "DoubleDoubleFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleDoubleFunction",
          "name": "DoubleDoubleFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.matrix.DoubleMatrix2D other, cern.colt.function.DoubleDoubleFunction aggr, cern.colt.function.DoubleDoubleFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(double[][] values)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[D",
          "name": "double[][]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "assign(double[][] values)",
      "comment": "Sets all cells to the state specified by values. values is required to have the form values[row][column] and have exactly the same number of rows and columns as the receiver.  The values are copied. So subsequent changes in values are not reflected in the matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(double value)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "assign(double value)",
      "comment": "Sets all cells to the state specified by value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.function.DoubleFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleFunction",
          "name": "DoubleFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.function.DoubleFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.DoubleMatrix2D other)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.DoubleMatrix2D other)",
      "comment": "Replaces all cell values of the receiver with the values of another matrix. Both matrices must have the same number of rows and columns. If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces as if using an intermediate auxiliary deep copy of other.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.DoubleMatrix2D y, cern.colt.function.DoubleDoubleFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.DoubleDoubleFunction",
          "name": "DoubleDoubleFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.DoubleMatrix2D y, cern.colt.function.DoubleDoubleFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cardinality()",
    "name": "cardinality",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "cardinality()",
      "comment": "Returns the number of cells having non-zero values; ignores tolerance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "copy()",
      "comment": "Constructs and returns a deep copy of the receiver.  Note that the returned matrix is an independent deep copy. The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(double value)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "equals(double value)",
      "comment": "Returns whether all cells are equal to the given value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object obj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "obj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object obj)",
      "comment": "Compares this object against the specified object. The result is true if and only if the argument is not null and is at least a DoubleMatrix2D object that has the same number of columns and rows as the receiver and has exactly the same values at the same coordinates.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "forEachNonZero(cern.colt.function.IntIntDoubleFunction function)",
    "name": "forEachNonZero",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.IntIntDoubleFunction",
          "name": "IntIntDoubleFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "forEachNonZero(cern.colt.function.IntIntDoubleFunction function)",
      "comment": "Assigns the result of a function to each non-zero cell; x[row,col] = function(x[row,col]). Use this method for fast special-purpose iteration. If you want to modify another matrix instead of this (i.e. work in read-only mode), simply return the input value unchanged. Parameters to function are as follows: first==row, second==column, third==nonZeroValue.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int row, int column)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "get(int row, int column)",
      "comment": "Returns the matrix cell value at coordinate [row,column].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getContent()",
    "name": "getContent",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getContent()",
      "comment": "Returns the content of this matrix if it is a wrapper; or this otherwise. Override this method in wrappers.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNonZeros(cern.colt.list.IntArrayList rowList, cern.colt.list.IntArrayList columnList, cern.colt.list.DoubleArrayList valueList)",
    "name": "getNonZeros",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "rowList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "columnList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.DoubleArrayList",
          "name": "DoubleArrayList",
          "isArray": false
        },
        "name": "valueList"
      }
    ],
    "equivalence": {
      "member": "getNonZeros(cern.colt.list.IntArrayList rowList, cern.colt.list.IntArrayList columnList, cern.colt.list.DoubleArrayList valueList)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int row, int column)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "getQuick(int row, int column)",
      "comment": "Returns the matrix cell value at coordinate [row,column]. Provided with invalid parameters this method may return invalid objects without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): 0 <= column < columns() && 0 <= row < rows().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCells(cern.colt.matrix.DoubleMatrix2D other)",
    "name": "haveSharedCells",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCells(cern.colt.matrix.DoubleMatrix2D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCellsRaw(cern.colt.matrix.DoubleMatrix2D other)",
    "name": "haveSharedCellsRaw",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCellsRaw(cern.colt.matrix.DoubleMatrix2D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like()",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "like()",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the same number of rows and columns. For example, if the receiver is an instance of type DenseDoubleMatrix2D the new matrix must also be of type DenseDoubleMatrix2D, if the receiver is an instance of type SparseDoubleMatrix2D the new matrix must also be of type SparseDoubleMatrix2D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like(int rows, int columns)",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      }
    ],
    "equivalence": {
      "member": "like(int rows, int columns)",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the specified number of rows and columns. For example, if the receiver is an instance of type DenseDoubleMatrix2D the new matrix must also be of type DenseDoubleMatrix2D, if the receiver is an instance of type SparseDoubleMatrix2D the new matrix must also be of type SparseDoubleMatrix2D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like1D(int size)",
    "name": "like1D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      }
    ],
    "equivalence": {
      "member": "like1D(int size)",
      "comment": "Construct and returns a new 1-d matrix of the corresponding dynamic type, entirelly independent of the receiver. For example, if the receiver is an instance of type DenseDoubleMatrix2D the new matrix must be of type DenseDoubleMatrix1D, if the receiver is an instance of type SparseDoubleMatrix2D the new matrix must be of type SparseDoubleMatrix1D, etc.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like1D(int size, int zero, int stride)",
    "name": "like1D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "size"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "zero"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "stride"
      }
    ],
    "equivalence": {
      "member": "like1D(int size, int zero, int stride)",
      "comment": "Construct and returns a new 1-d matrix of the corresponding dynamic type, sharing the same cells. For example, if the receiver is an instance of type DenseDoubleMatrix2D the new matrix must be of type DenseDoubleMatrix1D, if the receiver is an instance of type SparseDoubleMatrix2D the new matrix must be of type SparseDoubleMatrix1D, etc.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int row, int column, double value)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "set(int row, int column, double value)",
      "comment": "Sets the matrix cell at coordinate [row,column] to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int row, int column, double value)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "setQuick(int row, int column, double value)",
      "comment": "Sets the matrix cell at coordinate [row,column] to the specified value. Provided with invalid parameters this method may access illegal indexes without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): 0 <= column < columns() && 0 <= row < rows().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double[][]",
      "name": "double[][]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "toArray()",
      "comment": "Constructs and returns a 2-dimensional array containing the cell values. The returned array values has the form values[row][column] and has the same number of rows and columns as the receiver.  The values are copied. So subsequent changes in values are not reflected in the matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string representation using default formatting. @see cern.colt.matrix.doublealgo.Formatter",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "view()",
    "name": "view",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "view()",
      "comment": "Constructs and returns a new view equal to the receiver. The view is a shallow clone. Calls clone() and casts the result.  Note that the view is not a deep copy. The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa.  Use #copy() to construct an independent deep copy rather than a new view.",
      "kind": "FreeText",
      "condition": "methodResultID.equals((DoubleMatrix2D) receiverObjectID.clone())"
    }
  },
  {
    "signature": "viewColumn(int column)",
    "name": "viewColumn",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "viewColumn(int column)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewColumnFlip()",
    "name": "viewColumnFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewColumnFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewDice()",
    "name": "viewDice",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewDice()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewPart(int row, int column, int height, int width)",
    "name": "viewPart",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "height"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "width"
      }
    ],
    "equivalence": {
      "member": "viewPart(int row, int column, int height, int width)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewRow(int row)",
    "name": "viewRow",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      }
    ],
    "equivalence": {
      "member": "viewRow(int row)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewRowFlip()",
    "name": "viewRowFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewRowFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(int[] rowIndexes, int[] columnIndexes)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "rowIndexes"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "columnIndexes"
      }
    ],
    "equivalence": {
      "member": "viewSelection(int[] rowIndexes, int[] columnIndexes)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(cern.colt.matrix.DoubleMatrix1DProcedure condition)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix1DProcedure",
          "name": "DoubleMatrix1DProcedure",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "equivalence": {
      "member": "viewSelection(cern.colt.matrix.DoubleMatrix1DProcedure condition)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelectionLike(int[] rowOffsets, int[] columnOffsets)",
    "name": "viewSelectionLike",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "rowOffsets"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "columnOffsets"
      }
    ],
    "equivalence": {
      "member": "viewSelectionLike(int[] rowOffsets, int[] columnOffsets)",
      "comment": "Construct and returns a new selection view.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSorted(int column)",
    "name": "viewSorted",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "viewSorted(int column)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewStrides(int rowStride, int columnStride)",
    "name": "viewStrides",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rowStride"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columnStride"
      }
    ],
    "equivalence": {
      "member": "viewStrides(int rowStride, int columnStride)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "zAssign8Neighbors(cern.colt.matrix.DoubleMatrix2D B, cern.colt.function.Double9Function function)",
    "name": "zAssign8Neighbors",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "B"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.Double9Function",
          "name": "Double9Function",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "zAssign8Neighbors(cern.colt.matrix.DoubleMatrix2D B, cern.colt.function.Double9Function function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "zMult(cern.colt.matrix.DoubleMatrix1D y, cern.colt.matrix.DoubleMatrix1D z)",
    "name": "zMult",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
          "name": "DoubleMatrix1D",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
          "name": "DoubleMatrix1D",
          "isArray": false
        },
        "name": "z"
      }
    ],
    "equivalence": {
      "member": "zMult(cern.colt.matrix.DoubleMatrix1D y, cern.colt.matrix.DoubleMatrix1D z)",
      "comment": "Linear algebraic matrix-vector multiplication; z = A * y; Equivalent to return A.zMult(y,z,1,0);",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.zMult(args[0],args[1],1,0))"
    }
  },
  {
    "signature": "zMult(cern.colt.matrix.DoubleMatrix1D y, cern.colt.matrix.DoubleMatrix1D z, double alpha, double beta, boolean transposeA)",
    "name": "zMult",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
      "name": "cern.colt.matrix.DoubleMatrix1D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
          "name": "DoubleMatrix1D",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix1D",
          "name": "DoubleMatrix1D",
          "isArray": false
        },
        "name": "z"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "beta"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "transposeA"
      }
    ],
    "equivalence": {
      "member": "zMult(cern.colt.matrix.DoubleMatrix1D y, cern.colt.matrix.DoubleMatrix1D z, double alpha, double beta, boolean transposeA)",
      "comment": "Linear algebraic matrix-vector multiplication; z = alpha * A * y + beta*z. z[i] = alpha*Sum(A[i,j] * y[j]) + beta*z[i], i=0..A.rows()-1, j=0..y.size()-1. Where A == this. <br> Note: Matrix shape conformance is checked after potential transpositions.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "zMult(cern.colt.matrix.DoubleMatrix2D B, cern.colt.matrix.DoubleMatrix2D C)",
    "name": "zMult",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "B"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "C"
      }
    ],
    "equivalence": {
      "member": "zMult(cern.colt.matrix.DoubleMatrix2D B, cern.colt.matrix.DoubleMatrix2D C)",
      "comment": "Linear algebraic matrix-matrix multiplication; C = A x B; Equivalent to A.zMult(B,C,1,0,false,false).",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.zMult(args[0],args[1],1,0,false,false))"
    }
  },
  {
    "signature": "zMult(cern.colt.matrix.DoubleMatrix2D B, cern.colt.matrix.DoubleMatrix2D C, double alpha, double beta, boolean transposeA, boolean transposeB)",
    "name": "zMult",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "cern.colt.matrix.DoubleMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "B"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
          "name": "DoubleMatrix2D",
          "isArray": false
        },
        "name": "C"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "alpha"
      },
      {
        "type": {
          "qualifiedName": "double",
          "name": "double",
          "isArray": false
        },
        "name": "beta"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "transposeA"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "transposeB"
      }
    ],
    "equivalence": {
      "member": "zMult(cern.colt.matrix.DoubleMatrix2D B, cern.colt.matrix.DoubleMatrix2D C, double alpha, double beta, boolean transposeA, boolean transposeB)",
      "comment": "Linear algebraic matrix-matrix multiplication; C = alpha * A x B + beta*C. C[i,j] = alpha*Sum(A[i,k] * B[k,j]) + beta*C[i,j], k=0..n-1. <br> Matrix shapes: A(m x n), B(n x p), C(m x p). <br> Note: Matrix shape conformance is checked after potential transpositions.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "zSum()",
    "name": "zSum",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.DoubleMatrix2D",
      "name": "DoubleMatrix2D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.DoubleMatrix2D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "zSum()",
      "comment": "Returns the sum of all cells; Sum( x[i,j] ).",
      "kind": "FreeText",
      "condition": ""
    }
  }
]