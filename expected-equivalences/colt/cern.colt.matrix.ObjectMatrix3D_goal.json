[
  {
    "signature": "cern.colt.matrix.ObjectMatrix3D()",
    "name": "cern.colt.matrix.ObjectMatrix3D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "cern.colt.matrix.ObjectMatrix3D()",
      "comment": "Makes this class non instantiable, but still let's others inherit from it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectFunction",
          "name": "ObjectFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "aggregate(cern.colt.matrix.ObjectMatrix3D other, cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectObjectFunction f)",
    "name": "aggregate",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
          "name": "ObjectMatrix3D",
          "isArray": false
        },
        "name": "other"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "aggr"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "f"
      }
    ],
    "equivalence": {
      "member": "aggregate(cern.colt.matrix.ObjectMatrix3D other, cern.colt.function.ObjectObjectFunction aggr, cern.colt.function.ObjectObjectFunction f)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(java.lang.Object[][][] values)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[[[Ljava.lang.Object;",
          "name": "Object[][][]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "member": "assign(java.lang.Object[][][] values)",
      "comment": "Sets all cells to the state specified by values. values is required to have the form values[slice][row][column] and have exactly the same number of slices, rows and columns as the receiver.  The values are copied. So subsequent changes in values are not reflected in the matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.function.ObjectFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectFunction",
          "name": "ObjectFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.function.ObjectFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.ObjectMatrix3D other)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
          "name": "ObjectMatrix3D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.ObjectMatrix3D other)",
      "comment": "Replaces all cell values of the receiver with the values of another matrix. Both matrices must have the same number of slices, rows and columns. If both matrices share the same cells (as is the case if they are views derived from the same matrix) and intersect in an ambiguous way, then replaces as if using an intermediate auxiliary deep copy of other.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(cern.colt.matrix.ObjectMatrix3D y, cern.colt.function.ObjectObjectFunction function)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
          "name": "ObjectMatrix3D",
          "isArray": false
        },
        "name": "y"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.function.ObjectObjectFunction",
          "name": "ObjectObjectFunction",
          "isArray": false
        },
        "name": "function"
      }
    ],
    "equivalence": {
      "member": "assign(cern.colt.matrix.ObjectMatrix3D y, cern.colt.function.ObjectObjectFunction function)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "assign(java.lang.Object value)",
    "name": "assign",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "assign(java.lang.Object value)",
      "comment": "Sets all cells to the state specified by value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "cardinality()",
    "name": "cardinality",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "cardinality()",
      "comment": "Returns the number of cells having non-zero values; ignores tolerance.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "copy()",
    "name": "copy",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "copy()",
      "comment": "Constructs and returns a deep copy of the receiver.  Note that the returned matrix is an independent deep copy. The returned matrix is not backed by this matrix, so changes in the returned matrix are not reflected in this matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object otherObj)",
      "comment": "Compares the specified Object with the receiver for equality. Equivalent to equals(otherObj,true).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.equals(args[0],true))"
    }
  },
  {
    "signature": "equals(java.lang.Object otherObj, boolean testForEquality)",
    "name": "equals",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "otherObj"
      },
      {
        "type": {
          "qualifiedName": "boolean",
          "name": "boolean",
          "isArray": false
        },
        "name": "testForEquality"
      }
    ],
    "equivalence": {
      "member": "equals(java.lang.Object otherObj, boolean testForEquality)",
      "comment": "Compares the specified Object with the receiver for equality. Returns true if and only if the specified Object is also at least an ObjectMatrix3D, both matrices have the same size, and all corresponding pairs of cells in the two matrices are the same. In other words, two matrices are defined to be equal if they contain the same cell values in the same order. Tests elements for equality or identity as specified by testForEquality. When testing for equality, two elements e1 and e2 are equal if (e1==null ? e2==null : e1.equals(e2)).)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "get(int slice, int row, int column)",
    "name": "get",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "get(int slice, int row, int column)",
      "comment": "Returns the matrix cell value at coordinate [slice,row,column].",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getContent()",
    "name": "getContent",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getContent()",
      "comment": "Returns the content of this matrix if it is a wrapper; or this otherwise. Override this method in wrappers.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNonZeros(cern.colt.list.IntArrayList sliceList, cern.colt.list.IntArrayList rowList, cern.colt.list.IntArrayList columnList, cern.colt.list.ObjectArrayList valueList)",
    "name": "getNonZeros",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "sliceList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "rowList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.IntArrayList",
          "name": "IntArrayList",
          "isArray": false
        },
        "name": "columnList"
      },
      {
        "type": {
          "qualifiedName": "cern.colt.list.ObjectArrayList",
          "name": "ObjectArrayList",
          "isArray": false
        },
        "name": "valueList"
      }
    ],
    "equivalence": {
      "member": "getNonZeros(cern.colt.list.IntArrayList sliceList, cern.colt.list.IntArrayList rowList, cern.colt.list.IntArrayList columnList, cern.colt.list.ObjectArrayList valueList)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getQuick(int slice, int row, int column)",
    "name": "getQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object",
      "name": "java.lang.Object",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "getQuick(int slice, int row, int column)",
      "comment": "Returns the matrix cell value at coordinate [slice,row,column]. Provided with invalid parameters this method may return invalid objects without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): slice<0 || slice>=slices() || row<0 || row>=rows() || column<0 || column>=column().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCells(cern.colt.matrix.ObjectMatrix3D other)",
    "name": "haveSharedCells",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
          "name": "ObjectMatrix3D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCells(cern.colt.matrix.ObjectMatrix3D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix3D other)",
    "name": "haveSharedCellsRaw",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
          "name": "ObjectMatrix3D",
          "isArray": false
        },
        "name": "other"
      }
    ],
    "equivalence": {
      "member": "haveSharedCellsRaw(cern.colt.matrix.ObjectMatrix3D other)",
      "comment": "Returns true if both matrices share at least one identical cell.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like()",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "like()",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the same number of slices, rows and columns. For example, if the receiver is an instance of type DenseObjectMatrix3D the new matrix must also be of type DenseObjectMatrix3D, if the receiver is an instance of type SparseObjectMatrix3D the new matrix must also be of type SparseObjectMatrix3D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like(int slices, int rows, int columns)",
    "name": "like",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slices"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      }
    ],
    "equivalence": {
      "member": "like(int slices, int rows, int columns)",
      "comment": "Construct and returns a new empty matrix of the same dynamic type as the receiver, having the specified number of slices, rows and columns. For example, if the receiver is an instance of type DenseObjectMatrix3D the new matrix must also be of type DenseObjectMatrix3D, if the receiver is an instance of type SparseObjectMatrix3D the new matrix must also be of type SparseObjectMatrix3D, etc. In general, the new matrix should have internal parametrization as similar as possible.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "like2D(int rows, int columns, int rowZero, int columnZero, int rowStride, int columnStride)",
    "name": "like2D",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix2D",
      "name": "cern.colt.matrix.ObjectMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rows"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columns"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rowZero"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columnZero"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rowStride"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columnStride"
      }
    ],
    "equivalence": {
      "member": "like2D(int rows, int columns, int rowZero, int columnZero, int rowStride, int columnStride)",
      "comment": "Construct and returns a new 2-d matrix of the corresponding dynamic type, sharing the same cells. For example, if the receiver is an instance of type DenseObjectMatrix3D the new matrix must also be of type DenseObjectMatrix2D, if the receiver is an instance of type SparseObjectMatrix3D the new matrix must also be of type SparseObjectMatrix2D, etc.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "set(int slice, int row, int column, java.lang.Object value)",
    "name": "set",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "set(int slice, int row, int column, java.lang.Object value)",
      "comment": "Sets the matrix cell at coordinate [slice,row,column] to the specified value.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setQuick(int slice, int row, int column, java.lang.Object value)",
    "name": "setQuick",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "value"
      }
    ],
    "equivalence": {
      "member": "setQuick(int slice, int row, int column, java.lang.Object value)",
      "comment": "Sets the matrix cell at coordinate [slice,row,column] to the specified value. Provided with invalid parameters this method may access illegal indexes without throwing any exception. You should only use this method when you are absolutely sure that the coordinate is within bounds. Precondition (unchecked): slice<0 || slice>=slices() || row<0 || row>=rows() || column<0 || column>=column().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[][][]",
      "name": "java.lang.Object[][][]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "toArray()",
      "comment": "Constructs and returns a 2-dimensional array containing the cell values. The returned array values has the form values[slice][row][column] and has the same number of slices, rows and columns as the receiver.  The values are copied. So subsequent changes in values are not reflected in the matrix, and vice-versa.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toString()",
    "name": "toString",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "toString()",
      "comment": "Returns a string representation using default formatting. @see cern.colt.matrix.objectalgo.Formatter",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "view()",
    "name": "view",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "view()",
      "comment": "Constructs and returns a new view equal to the receiver. The view is a shallow clone. Calls clone() and casts the result.  Note that the view is not a deep copy. The returned matrix is backed by this matrix, so changes in the returned matrix are reflected in this matrix, and vice-versa.  Use #copy() if you want to construct an independent deep copy rather than a new view.",
      "kind": "FreeText",
      "condition": "methodResultID.equals((ObjectMatrix3D) receiverObjectID.clone())"
    }
  },
  {
    "signature": "viewColumn(int column)",
    "name": "viewColumn",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix2D",
      "name": "cern.colt.matrix.ObjectMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "viewColumn(int column)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewColumnFlip()",
    "name": "viewColumnFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewColumnFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewDice(int axis0, int axis1, int axis2)",
    "name": "viewDice",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "axis0"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "axis1"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "axis2"
      }
    ],
    "equivalence": {
      "member": "viewDice(int axis0, int axis1, int axis2)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewPart(int slice, int row, int column, int depth, int height, int width)",
    "name": "viewPart",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "depth"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "height"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "width"
      }
    ],
    "equivalence": {
      "member": "viewPart(int slice, int row, int column, int depth, int height, int width)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewRow(int row)",
    "name": "viewRow",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix2D",
      "name": "cern.colt.matrix.ObjectMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      }
    ],
    "equivalence": {
      "member": "viewRow(int row)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewRowFlip()",
    "name": "viewRowFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewRowFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(int[] sliceIndexes, int[] rowIndexes, int[] columnIndexes)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "sliceIndexes"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "rowIndexes"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "columnIndexes"
      }
    ],
    "equivalence": {
      "member": "viewSelection(int[] sliceIndexes, int[] rowIndexes, int[] columnIndexes)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelection(cern.colt.matrix.ObjectMatrix2DProcedure condition)",
    "name": "viewSelection",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "cern.colt.matrix.ObjectMatrix2DProcedure",
          "name": "ObjectMatrix2DProcedure",
          "isArray": false
        },
        "name": "condition"
      }
    ],
    "equivalence": {
      "member": "viewSelection(cern.colt.matrix.ObjectMatrix2DProcedure condition)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSelectionLike(int[] sliceOffsets, int[] rowOffsets, int[] columnOffsets)",
    "name": "viewSelectionLike",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "sliceOffsets"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "rowOffsets"
      },
      {
        "type": {
          "qualifiedName": "[I",
          "name": "int[]",
          "isArray": true
        },
        "name": "columnOffsets"
      }
    ],
    "equivalence": {
      "member": "viewSelectionLike(int[] sliceOffsets, int[] rowOffsets, int[] columnOffsets)",
      "comment": "Construct and returns a new selection view.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSlice(int slice)",
    "name": "viewSlice",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix2D",
      "name": "cern.colt.matrix.ObjectMatrix2D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "slice"
      }
    ],
    "equivalence": {
      "member": "viewSlice(int slice)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSliceFlip()",
    "name": "viewSliceFlip",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "viewSliceFlip()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewSorted(int row, int column)",
    "name": "viewSorted",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "row"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "column"
      }
    ],
    "equivalence": {
      "member": "viewSorted(int row, int column)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "viewStrides(int sliceStride, int rowStride, int columnStride)",
    "name": "viewStrides",
    "containingClass": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "ObjectMatrix3D",
      "isArray": false
    },
    "targetClass": "cern.colt.matrix.ObjectMatrix3D",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "cern.colt.matrix.ObjectMatrix3D",
      "name": "cern.colt.matrix.ObjectMatrix3D",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "sliceStride"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "rowStride"
      },
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "columnStride"
      }
    ],
    "equivalence": {
      "member": "viewStrides(int sliceStride, int rowStride, int columnStride)",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  }
]