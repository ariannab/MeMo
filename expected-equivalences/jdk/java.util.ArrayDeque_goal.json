[
  {
    "signature": "java.util.ArrayDeque()",
    "name": "java.util.ArrayDeque",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "parameters": [],
    "equivalence": {
      "member": "java.util.ArrayDeque()",
      "comment": "Constructs an empty array deque with an initial capacity sufficient to hold 16 elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.ArrayDeque(int numElements)",
    "name": "java.util.ArrayDeque",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "int",
          "name": "int",
          "isArray": false
        },
        "name": "numElements"
      }
    ],
    "equivalence": {
      "member": "java.util.ArrayDeque(int numElements)",
      "comment": "Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "java.util.ArrayDeque(java.util.Collection<? extends E> c)",
    "name": "java.util.ArrayDeque",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Collection",
          "name": "Collection",
          "isArray": false
        },
        "name": "c"
      }
    ],
    "equivalence": {
      "member": "java.util.ArrayDeque(java.util.Collection<? extends E> c)",
      "comment": "Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator. (The first element returned by the collection's iterator becomes the first element, or front of the deque.)",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addFirst(E e)",
    "name": "addFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "addFirst(E e)",
      "comment": "Inserts the specified element at the front of this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addLast(E e)",
    "name": "addLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "addLast(E e)",
      "comment": "Inserts the specified element at the end of this deque. This method is equivalent to #add.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.add(args[0]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "offerFirst(E e)",
    "name": "offerFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offerFirst(E e)",
      "comment": "Inserts the specified element at the front of this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "offerLast(E e)",
    "name": "offerLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offerLast(E e)",
      "comment": "Inserts the specified element at the end of this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirst()",
    "name": "removeFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "removeFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLast()",
    "name": "removeLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "removeLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollFirst()",
    "name": "pollFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pollFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "pollLast()",
    "name": "pollLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pollLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirst()",
    "name": "getFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLast()",
    "name": "getLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "getLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekFirst()",
    "name": "peekFirst",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peekFirst()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "peekLast()",
    "name": "peekLast",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peekLast()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeFirstOccurrence(java.lang.Object o)",
    "name": "removeFirstOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "removeFirstOccurrence(java.lang.Object o)",
      "comment": "Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeLastOccurrence(java.lang.Object o)",
    "name": "removeLastOccurrence",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "removeLastOccurrence(java.lang.Object o)",
      "comment": "Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "add(E e)",
    "name": "add",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "add(E e)",
      "comment": "Inserts the specified element at the end of this deque. This method is equivalent to #addLast.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addLast(args[0]);receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "offer(E e)",
    "name": "offer",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "offer(E e)",
      "comment": "Inserts the specified element at the end of this deque. This method is equivalent to #offerLast.",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.offerLast(args[0]))"
    }
  },
  {
    "signature": "remove()",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "remove()",
      "comment": "Retrieves and removes the head of the queue represented by this deque. This method differs from #poll poll only in that it throws an exception if this deque is empty. This method is equivalent to #removeFirst.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.removeFirst())"
    }
  },
  {
    "signature": "poll()",
    "name": "poll",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "poll()",
      "comment": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to #pollFirst.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.pollFirst())"
    }
  },
  {
    "signature": "element()",
    "name": "element",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "element()",
      "comment": "Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from #peek peek only in that it throws an exception if this deque is empty. This method is equivalent to #getFirst.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.getFirst())"
    }
  },
  {
    "signature": "peek()",
    "name": "peek",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "peek()",
      "comment": "Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty. This method is equivalent to #peekFirst.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.peekFirst())"
    }
  },
  {
    "signature": "push(E e)",
    "name": "push",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "e"
      }
    ],
    "equivalence": {
      "member": "push(E e)",
      "comment": "Pushes an element onto the stack represented by this deque. In other words, inserts the element at the front of this deque. This method is equivalent to #addFirst.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addFirst(args[0]);\nreceiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "pop()",
    "name": "pop",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "E",
      "name": "E",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "pop()",
      "comment": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to #removeFirst().",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.removeFirst())"
    }
  },
  {
    "signature": "size()",
    "name": "size",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "size()",
      "comment": "Returns the number of elements in this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "isEmpty()",
    "name": "isEmpty",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "isEmpty()",
      "comment": "Returns true if this deque contains no elements.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "iterator()",
    "name": "iterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "iterator()",
      "comment": "Returns an iterator over the elements in this deque. The elements will be ordered from first (head) to last (tail). This is the same order that elements would be dequeued (via successive calls to #remove or popped (via successive calls to #pop).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "descendingIterator()",
    "name": "descendingIterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<E>",
      "name": "java.util.Iterator<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "descendingIterator()",
      "comment": "",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "contains(java.lang.Object o)",
    "name": "contains",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "contains(java.lang.Object o)",
      "comment": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "remove(java.lang.Object o)",
    "name": "remove",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Object",
          "name": "Object",
          "isArray": false
        },
        "name": "o"
      }
    ],
    "equivalence": {
      "member": "remove(java.lang.Object o)",
      "comment": "Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to #removeFirstOccurrence(Object).",
      "kind": "FreeText",
      "condition": "methodResultID==(receiverObjectClone.removeFirstOccurrence(args[0]))"
    }
  },
  {
    "signature": "clear()",
    "name": "clear",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clear()",
      "comment": "Removes all of the elements from this deque. The deque will be empty after this call returns.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray()",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [],
    "equivalence": {
      "member": "toArray()",
      "comment": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this deque. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "toArray(T[] a)",
    "name": "toArray",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T[]",
      "name": "T[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "a"
      }
    ],
    "equivalence": {
      "member": "toArray(T[] a)",
      "comment": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the #toArray() method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String}:  {@code String[] y = x.toArray(new String[0]); Note that toArray(new Object[0]) is identical in function to toArray().",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clone()",
    "name": "clone",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayDeque<E>",
      "name": "java.util.ArrayDeque<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "clone()",
      "comment": "Returns a copy of this deque.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "spliterator()",
    "name": "spliterator",
    "containingClass": {
      "qualifiedName": "java.util.ArrayDeque",
      "name": "ArrayDeque",
      "isArray": false
    },
    "targetClass": "java.util.ArrayDeque",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Spliterator<E>",
      "name": "java.util.Spliterator<E>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "member": "spliterator()",
      "comment": "Creates a <a href=\"Spliterator.html#binding\">late-binding</a> and fail-fast Spliterator over the elements in this deque. The Spliterator reports Spliterator#SIZED, Spliterator#SUBSIZED, Spliterator#ORDERED, and Spliterator#NONNULL. Overriding implementations should document the reporting of additional characteristic values.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]