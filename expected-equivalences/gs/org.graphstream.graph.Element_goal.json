[
  {
    "signature": "getHash(java.lang.String key)",
    "name": "getHash",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.HashMap<?, ?>",
      "name": "java.util.HashMap<?, ?>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the hash bound to key. Hashes are special attributes whose value is a set of pairs (name,object). Instances of object implementing the CompoundAttribute interface are considered like hashes since they can be transformed to a hash. If an attribute with the same name exists but is not a hash, null is returned. We cannot enforce the type of the key. It is considered a string and you should use \"Object.toString()\" to get it.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getId()",
    "name": "getId",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.String",
      "name": "java.lang.String",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Unique identifier of this element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "addAttributes(java.util.Map<java.lang.String, java.lang.Object> attributes)",
    "name": "addAttributes",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.util.Map",
          "name": "Map",
          "isArray": false
        },
        "name": "attributes"
      }
    ],
    "equivalence": {
      "comment": "Add or replace each attribute found in attributes. Existing attributes are overwritten silently. All classes inheriting from Number can be considered as numbers. All classes inheriting from CharSequence can be considered as labels.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getNumber(java.lang.String key)",
    "name": "getNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "double",
      "name": "double",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the number bound to key. Numbers are special attributes whose value is an instance of Number. If an attribute with the same name exists but is not a Number, NaN is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "setAttribute(java.lang.String attribute, java.lang.Object... values)",
    "name": "setAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Like #addAttribute(String, Object...) but for consistency.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addAttribute(args[0],args[1]); receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "addAttribute(java.lang.String attribute, java.lang.Object... values)",
    "name": "addAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Add or replace the value of an attribute. Existing attributes are overwritten silently. All classes inheriting from Number can be considered as numbers. All classes inheriting from CharSequence can be considered as labels. You can pass zero, one or more arguments for the attribute values. If no value is given, a boolean with value \"true\" is added. If there is more than one value, an array is stored. If there is only one value, the value is stored (but not in an array).",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getLabel(java.lang.String key)",
    "name": "getLabel",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.CharSequence",
      "name": "java.lang.CharSequence",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the label string bound to the given key key. Labels are special attributes whose value is a character sequence. If an attribute with the same name exists but is not a character sequence, null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasHash(java.lang.String key)",
    "name": "hasHash",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a hash value for the given key? A hash is a set of pairs (key,value) or objects that implement the org.graphstream.graph.CompoundAttribute class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasVector(java.lang.String key)",
    "name": "hasVector",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a vector value for the given key? A vector is an attribute whose value is a sequence of numbers.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasAttribute(java.lang.String key)",
    "name": "hasAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a value for the given attribute key?",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasNumber(java.lang.String key)",
    "name": "hasNumber",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a number for the given key? A number is an attribute whose value is an instance of Number.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirstAttributeOf(java.lang.Class<T> clazz, java.lang.String... keys)",
    "name": "getFirstAttributeOf",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "clazz"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "keys"
      }
    ],
    "equivalence": {
      "comment": "Like #getAttribute(String, Class), but returns the first existing attribute in a list of keys, instead of only one key. The key list order matters.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getArray(java.lang.String key)",
    "name": "getArray",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Object[]",
      "name": "java.lang.Object[]",
      "isArray": true
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the array of objects bound to key. Arrays of objects are special attributes whose value is a sequence of objects. If an attribute with the same name exists but is not an array, null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getFirstAttributeOf(java.lang.String... keys)",
    "name": "getFirstAttributeOf",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "[Ljava.lang.String;",
          "name": "String[]",
          "isArray": true
        },
        "name": "keys"
      }
    ],
    "equivalence": {
      "comment": "Like #getAttribute(String), but returns the first existing attribute in a list of keys, instead of only one key. The key list order matters.",
      "kind": "FreeText",
      "condition": "methodResultID.equals(receiverObjectClone.getAttribute(args[0][0]))"
    }
  },
  {
    "signature": "getVector(java.lang.String key)",
    "name": "getVector",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.ArrayList<? extends java.lang.Number>",
      "name": "java.util.ArrayList<? extends java.lang.Number>",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the vector of number bound to key. Vectors of numbers are special attributes whose value is a sequence of numbers. If an attribute with the same name exists but is not a vector of number, null is returned.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "changeAttribute(java.lang.String attribute, java.lang.Object... values)",
    "name": "changeAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": true,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      },
      {
        "type": {
          "qualifiedName": "[Ljava.lang.Object;",
          "name": "Object[]",
          "isArray": true
        },
        "name": "values"
      }
    ],
    "equivalence": {
      "comment": "Like #addAttribute(String, Object...) but for consistency.",
      "kind": "FreeText",
      "condition": "receiverObjectClone.addAttribute(args[0],args[1]); receiverObjectClone.equals(receiverObjectID)"
    }
  },
  {
    "signature": "hasAttribute(java.lang.String key, java.lang.Class<?> clazz)",
    "name": "hasAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "clazz"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a value for the given attribute key and this value is an instance of the given class?",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasArray(java.lang.String key)",
    "name": "hasArray",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store an array value for the given key? A vector is an attribute whose value is an array of objects.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAttributeCount()",
    "name": "getAttributeCount",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Number of attributes stored in this element.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "removeAttribute(java.lang.String attribute)",
    "name": "removeAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "attribute"
      }
    ],
    "equivalence": {
      "comment": "Remove an attribute. Non-existent attributes errors are ignored silently.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getEachAttributeKey()",
    "name": "getEachAttributeKey",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.lang.Iterable<java.lang.String>",
      "name": "java.lang.Iterable<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "An iterable view on the set of attribute keys usable within a for-each loop.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "clearAttributes()",
    "name": "clearAttributes",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "void",
      "name": "void",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Remove all registered attributes. This includes numbers, labels and vectors.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAttribute(java.lang.String key, java.lang.Class<T> clazz)",
    "name": "getAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      },
      {
        "type": {
          "qualifiedName": "java.lang.Class",
          "name": "Class",
          "isArray": false
        },
        "name": "clazz"
      }
    ],
    "equivalence": {
      "comment": "Get the attribute object bound to the given key if it is an instance of the given class. Some The returned value maybe null to indicate the attribute does not exists or is not an instance of the given class.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAttribute(java.lang.String key)",
    "name": "getAttribute",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "T",
      "name": "T",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Get the attribute object bound to the given key. The returned value may be null to indicate the attribute does not exists or is not supported.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "hasLabel(java.lang.String key)",
    "name": "hasLabel",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "boolean",
      "name": "boolean",
      "isArray": false
    },
    "parameters": [
      {
        "type": {
          "qualifiedName": "java.lang.String",
          "name": "String",
          "isArray": false
        },
        "name": "key"
      }
    ],
    "equivalence": {
      "comment": "Does this element store a label value for the given key? A label is an attribute whose value is a string.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getIndex()",
    "name": "getIndex",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "int",
      "name": "int",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "The current index of this element",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAttributeKeyIterator()",
    "name": "getAttributeKeyIterator",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Iterator<java.lang.String>",
      "name": "java.util.Iterator<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "Iterator on all attributes keys.",
      "kind": "FreeText",
      "condition": ""
    }
  },
  {
    "signature": "getAttributeKeySet()",
    "name": "getAttributeKeySet",
    "containingClass": {
      "qualifiedName": "org.graphstream.graph.Element",
      "name": "Element",
      "isArray": false
    },
    "targetClass": "org.graphstream.graph.Element",
    "isVarArgs": false,
    "returnType": {
      "qualifiedName": "java.util.Collection<java.lang.String>",
      "name": "java.util.Collection<java.lang.String>",
      "isArray": false
    },
    "parameters": [],
    "equivalence": {
      "comment": "An unmodifiable view on the set of attribute keys.",
      "kind": "FreeText",
      "condition": ""
    }
  }
]